#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## posix/nlim_auto
####


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi


if [    "$nlim_clk_tck" = "yes"                 \
     -o "$nlim_line_max" = "yes"                \
     -o "$nlim_pagesize" = "yes"                \
     -o "$nlim_path_max" = "yes"                \
     -o "$nlim_times" = "yes"                   \
   ]; then
  echo "checking for nlim.h ..."
else
  return
fi



# check CLK_TCK
#----------------------------------------
if [ "$nlim_clk_tck" = "yes" -a -z "$nlim_clk_tck_done" ]; then
  case $NM_SYSTEM in
    Linux|Darwin)
      nm_feature="CLK_TCK"
      nm_feature_name="nm_clk_tck"
      nm_feature_run="value"
      nm_feature_h='
#include <stdio.h>
#include <unistd.h>
'
      nm_feature_flags=
      nm_feature_test='
#if (CLK_TCK)
  printf("%ld\n", CLK_TCK);
#else
  printf("%ld\n", sysconf(_SC_CLK_TCK));
#endif
return 0;
'
      . ${NORE_ROOT}/auto/feature
      ;;
    WinNT)
      ;;
    *)
      ;;
  esac
  nlim_clk_tck_done="yes"
fi                            # end of _SC_CLK_TCK


# check LINE_MAX
#----------------------------------------
if [ "$nlim_line_max" = "yes" -a -z "$nlim_line_max_done" ]; then
  case $NM_SYSTEM in
    Linux|Darwin)
      nm_feature="LINE_MAX"
      nm_feature_name="nm_line_max"
      nm_feature_run=value
      nm_feature_h='
#include <stdio.h>
#include <unistd.h>
#include <limits.h>
'
    nm_feature_flags=
    nm_feature_test='
long line_max = 0, max;
#if defined(LINE_MAX) && (LINE_MAX > 0)
  line_max = LINE_MAX;
#endif
  max = sysconf(_SC_LINE_MAX);
  if (max > 0) {
    line_max = max;
  }
  printf("%ld\n", line_max);
  return 0;
'
      . ${NORE_ROOT}/auto/feature
      ;;
    WinNT)
      nm_feature="LINE_MAX"
      nm_feature_name="nm_line_max"
      nm_feature_run=value
      nm_feature_h='
#include <stdio.h>
#include <limits.h>
#include <windows.h>
'
    nm_feature_flags=
    nm_feature_test='
long line_max = 2048;
#if defined(LINE_MAX) && (LINE_MAX > 0)
   line_max = LINE_MAX;
#endif
  printf("%d\n", line_max);
  return 0;
'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      ;;
  esac                            # end of LINE_MAX
  nlim_line_max_done="yes"
fi


# check PAGESIZE
#----------------------------------------
if [ "$nlim_pagesize" = "yes" -a -z "$nlim_pagesize_done" ]; then
  case $NM_SYSTEM in
    Linux|Darwin)
      nm_feature="PAGESIZE"
      nm_feature_name="nm_pagesize"
      nm_feature_run=value
      nm_feature_h='
#include <stdio.h>
#include <unistd.h>
#include <limits.h>
'
    nm_feature_flags=
    nm_feature_test='
int pagesize;
pagesize = sysconf(_SC_PAGESIZE);
printf("%ld\n", (long)pagesize);
return 0;
'
      . ${NORE_ROOT}/auto/feature
      ;;
    WinNT)
      nm_feature="PAGESIZE"
      nm_feature_name="nm_pagesize"
      nm_feature_run=value
      nm_feature_h='
#include <stdio.h>
#include <limits.h>
#include <windows.h>
'
    nm_feature_flags=
    nm_feature_test='
int pagesize;
SYSTEM_INFO sysinfo;
GetSystemInfo(&sysinfo);
pagesize = sysinfo.dwPageSize;
printf("%d\n", pagesize);
return 0;
'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      ;;
  esac                            # end of PAGESIZE
  nlim_pagesize_done="yes"
fi


# check PATH_MAX
#----------------------------------------
if [ "$nlim_path_max" = "yes" -a -z "$nlim_path_max_done" ]; then
  case $NM_SYSTEM in
    Linux|Darwin)
      nm_feature="PATH_MAX"
      nm_feature_name="nm_path_max"
      nm_feature_run=value
      nm_feature_h='
#include <stdio.h>
#include <unistd.h>
#include <limits.h>
'
    nm_feature_flags=
    nm_feature_test='
long path_max = 1024;
#if defined(PATH_MAX) && (PATH_MAX > 0)
  path_max = PATH_MAX;
#endif
  printf("%ld\n", path_max);
  return 0;
'
      . ${NORE_ROOT}/auto/feature
      ;;
    WinNT)
      nm_feature="PATH_MAX"
      nm_feature_name="nm_path_max"
      nm_feature_run=value
      nm_feature_h='
#include <stdio.h>
#include <limits.h>
#include <windows.h>
'
    nm_feature_flags=
    nm_feature_test='
long path_max = 1024;
#if defined(MAX_PATH) && (MAX_PATH > 0)
   path_max = MAX_PATH;
#endif
  printf("%d\n", path_max);
  return 0;
'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      ;;
  esac                            # end of PATH_MAX
  nlim_path_max_done="yes"
fi


# check times
#----------------------------------------
if [ "$nlim_times" = "yes" -a -z "nlim_times_done" ]; then
  if `check_clk_tck "dumb"`; then
    nm_feature="times"
    nm_feature_name="nm_have_times"
    nm_feature_run=no
    nm_feature_h='#include <sys/times.h>'
    nm_feature_flags=
    nm_feature_test='struct tms x; (void)x;'
    . ${NORE_ROOT}/auto/feature
  fi
  nlim_times_done="yes"
fi                              # end of times


# eof
