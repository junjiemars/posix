#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## check limits in nlim_auto
####



# # check PATH_MAX
# #----------------------------------------
# case $NM_SYSTEM in
#   Darwin|Linux)
#     nm_feature="PATH_MAX"
#     nm_feature_name="nm_path_max"
#     nm_feature_run=value
#     nm_feature_h='
# #include <stdio.h>
# #include <unistd.h>
# #include <limits.h>
# '
#     nm_feature_flags=
#     nm_feature_test='
# long path_max = 0;
# #if defined(PATH_MAX) && (PATH_MAX > 0)
#    path_max = PATH_MAX;
# #else
#   path_max = pathconf("/", _PC_PATH_MAX);
#   if (path_max <= 0) {
# #   if defined(_POSIX_PATH_MAX) && (_POSIX_PATH_MAX > 0)
#       path_max = _POSIX_PATH_MAX;
# #   else
#       path_max = 256;
# #   endif
#   } else {
#     path_max++;
#   }
# #endif
#   printf("%li\n", path_max);
#   return 0;
# '
#     . ${NORE_ROOT}/auto/feature
#     ;;
#   WinNT)
#     nm_feature="PATH_MAX"
#     nm_feature_name="nm_path_max"
#     nm_feature_run=value
#     nm_feature_h='
# #include <windows.h>
# #include <stdlib.h>
# #include <limits.h>
# '
#     nm_feature_flags=
#     nm_feature_test='
# long path_max = 256;
# #if defined(MAX_PATH) && (MAX_PATH > 0)
#   path_max = MAX_PATH;
# #endif
#   printf("%li\n", path_max);
#   return 0;
# '
#     . ${NORE_ROOT}/auto/feature
#     ;;
#   *)
#     ;;
# esac                            # end of PATH_MAX


# check LINE_MAX
#----------------------------------------
case $NM_SYSTEM in
  Linux|Darwin)
    nm_feature="LINE_MAX"
    nm_feature_name="nm_line_max"
    nm_feature_run=value
    nm_feature_h='
#include <stdio.h>
#include <unistd.h>
#include <limits.h>
'
    nm_feature_flags=
    nm_feature_test='
long line_max = 0;
#if defined(LINE_MAX) && (LINE_MAX > 0)
  line_max = LINE_MAX;
#else
  line_max = sysconf(_SC_LINE_MAX);
  if (line_max <= 0) {
    line_max = 2048;
  }
#endif
  printf("%ld\n", line_max);
  return 0;
'
    . ${NORE_ROOT}/auto/feature
    ;;
  WinNT)
    nm_feature="LINE_MAX"
    nm_feature_name="nm_line_max"
    nm_feature_run=value
    nm_feature_h='
#include <stdio.h>
#include <limits.h>
#include <windows.h>
'
    nm_feature_flags=
    nm_feature_test='
long line_max = 2048;
#if defined(LINE_MAX) && (LINE_MAX > 0)
   line_max = LINE_MAX;
#endif
  printf("%d\n", line_max);
  return 0;
'
    . ${NORE_ROOT}/auto/feature
    ;;
  *)
    ;;
esac                            # end of LINE_MAX


# # check PAGE_SIZE
# #----------------------------------------
# case $NM_SYSTEM in
#   Darwin|Linux)
#     nm_feature="PAGE_SIZE"
#     nm_feature_name="nm_page_size"
#     nm_feature_run=value
#     nm_feature_h='
# #include <stdio.h>
# #include <unistd.h>
# '
#     nm_feature_flags=
#     nm_feature_test='
# long sc = sysconf(_SC_PAGE_SIZE);
# printf("%ld\n", sc);
# return 0;
# '
#     . ${NORE_ROOT}/auto/feature
#     ;;
#   WinNT)
#     nm_feature="PAGE_SIZE"
#     nm_feature_name="nm_page_size"
#     nm_feature_run=value
#     nm_feature_h='
# #include <windows.h>
# #include <stdio.h>
# '
#     nm_feature_flags=
#     nm_feature_test='
# SYSTEM_INFO sc;
# GetSystemInfo(&sc);
# printf("%ld\n", sc.dwPageSize);
# return 0;
# '
#     . ${NORE_ROOT}/auto/feature
#     ;;
#   *)
#     ;;
# esac                            # end of PAGESIZE


# # check GETPW_R_SIZE_MAX
# #----------------------------------------
# case $NM_SYSTEM in
#   Linux|Darwin)
#     nm_feature="GETPW_R_SIZE_MAX"
#     nm_feature_name="nm_getpw_r_size_max"
#     nm_feature_run=value
#     nm_feature_h='
# #include <stdio.h>
# #include <unistd.h>
# '
#     nm_feature_flags=
#     nm_feature_test='
# long sc = sysconf(_SC_GETPW_R_SIZE_MAX);
# printf("%ld\n", sc);
# return 0;
# '
#     . ${NORE_ROOT}/auto/feature
#     ;;
#   WinNT)
#     nm_feature="GETPW_R_SIZE_MAX"
#     nm_feature_name="nm_getpw_r_size_max"
#     nm_feature_run=value
#     nm_feature_h=
#     nm_feature_flags=
#     nm_feature_test=
#     . ${NORE_ROOT}/auto/feature
#     ;;
#   *)
#     ;;
# esac                            # end of GETPW_R_SIZE_MAX


# eof
